struct phong_material {
	float3 ambient;
	float3 diffuse;
	float3 specular;
	float shininess;
};

struct light {
	float3 position;
	float3 color;
};

uniform float4x4 u_modelview_matrix;
uniform float3x3 u_normal_matrix;
uniform phong_material u_material;
uniform light u_light;

float3 phong_lighting(float3 normal, float3 L, float3 position)
{
	/* Ambient */
	float3 ambient = u_material.ambient;

	float theta = dot(L, normal);
	if (theta < 0)
		return ambient * u_light.color;

	/* Diffuse */
	float3 diffuse = theta * u_material.diffuse;

	/* Specular */
	float3 R = reflect(-L, normal);
	float3 V = normalize(-position);
	float specular_component = pow(max(0.0f, dot(R, V)), u_material.shininess);
	float3 specular = specular_component * u_material.specular;

	return (ambient + diffuse + specular) * u_light.color;
}

void main(
	float3 position : TEXCOORD0,
	float3 normal : TEXCOORD1,
	float4 color : COLOR,
	out float4 out_color : COLOR)
{
	float3 position_eyespace = mul(float4(position, 1.0f), u_modelview_matrix).xyz;
	float3 L = normalize(u_light.position - position_eyespace);
	float3 normal_eyespace = normalize(mul(normal, u_normal_matrix));

	out_color = float4(phong_lighting(normal_eyespace, L, position_eyespace), 1.0f) * color;
}
